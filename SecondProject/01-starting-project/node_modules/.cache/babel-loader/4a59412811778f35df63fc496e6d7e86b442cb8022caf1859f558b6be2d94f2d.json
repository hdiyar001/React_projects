{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\49179\\\\Desktop\\\\First-React-Projekt\\\\SecondProject\\\\01-starting-project\\\\src\\\\Components\\\\InvestmentTable.js\";\nimport React, { useState } from \"react\";\nimport InvestmentTableItem from \"./InvestmentTableBodyItems\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst yearlyData = []; // per-year results\nconst calculateHandler = userInput => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  let currentSavings = +userInput.currentSavings; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput.yearlySavings; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput.expectedInterest / 100;\n  const duration = +userInput.investmentDuration;\n  console.log(currentSavings + \" \" + yearlyContribution);\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yeartotalInterest: duration * yearlyContribution,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n};\nexport default function InvestmentTable(props) {\n  // const [calcYearlyData, SetCalcYearlyData] = useState([]);\n  console.log(props);\n  calculateHandler(props);\n\n  // SetCalcYearlyData(yearlyData);\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"result\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Interest (Year)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Interest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Invested Capital\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), yearlyData.map(obj => {\n      return /*#__PURE__*/_jsxDEV(InvestmentTableItem, {\n        redirctedobjs: obj\n      }, obj.year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = InvestmentTable;\nvar _c;\n$RefreshReg$(_c, \"InvestmentTable\");","map":{"version":3,"names":["React","useState","InvestmentTableItem","jsxDEV","_jsxDEV","yearlyData","calculateHandler","userInput","currentSavings","yearlyContribution","yearlySavings","expectedReturn","expectedInterest","duration","investmentDuration","console","log","i","yearlyInterest","push","year","yeartotalInterest","savingsEndOfYear","InvestmentTable","props","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","obj","redirctedobjs","_c","$RefreshReg$"],"sources":["C:/Users/49179/Desktop/First-React-Projekt/SecondProject/01-starting-project/src/Components/InvestmentTable.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport InvestmentTableItem from \"./InvestmentTableBodyItems\";\r\n\r\nconst yearlyData = []; // per-year results\r\nconst calculateHandler = (userInput) => {\r\n  // Should be triggered when form is submitted\r\n  // You might not directly want to bind it to the submit event on the form though...\r\n\r\n  let currentSavings = + userInput.currentSavings; // feel free to change the shape of this input object!\r\n  const yearlyContribution = +userInput.yearlySavings; // as mentioned: feel free to change the shape...\r\n  const expectedReturn = +userInput.expectedInterest / 100;\r\n  const duration = +userInput.investmentDuration;\r\n  console.log(currentSavings + \" \" + yearlyContribution);\r\n  // The below code calculates yearly results (total savings, interest etc)\r\n  for (let i = 0; i < duration; i++) {\r\n    const yearlyInterest = currentSavings * expectedReturn;\r\n    currentSavings += yearlyInterest + yearlyContribution;\r\n    yearlyData.push({\r\n      // feel free to change the shape of the data pushed to the array!\r\n      year: i + 1,\r\n      yeartotalInterest: duration * yearlyContribution,\r\n      yearlyInterest: yearlyInterest,\r\n      savingsEndOfYear: currentSavings,\r\n      yearlyContribution: yearlyContribution,\r\n    });\r\n  }\r\n};\r\nexport default function InvestmentTable(props) {\r\n  // const [calcYearlyData, SetCalcYearlyData] = useState([]);\r\n  console.log(props);\r\n  calculateHandler(props);\r\n\r\n  // SetCalcYearlyData(yearlyData);\r\n\r\n  return (\r\n    <table className=\"result\">\r\n      <thead>\r\n        <tr>\r\n          <th>Year</th>\r\n          <th>Total Savings</th>\r\n          <th>Interest (Year)</th>\r\n          <th>Total Interest</th>\r\n          <th>Invested Capital</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      {yearlyData.map((obj) => {\r\n        return <InvestmentTableItem key={obj.year} redirctedobjs={obj} />;\r\n      })}\r\n    </table>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,mBAAmB,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;AACvB,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EACtC;EACA;;EAEA,IAAIC,cAAc,GAAG,CAAED,SAAS,CAACC,cAAc,CAAC,CAAC;EACjD,MAAMC,kBAAkB,GAAG,CAACF,SAAS,CAACG,aAAa,CAAC,CAAC;EACrD,MAAMC,cAAc,GAAG,CAACJ,SAAS,CAACK,gBAAgB,GAAG,GAAG;EACxD,MAAMC,QAAQ,GAAG,CAACN,SAAS,CAACO,kBAAkB;EAC9CC,OAAO,CAACC,GAAG,CAACR,cAAc,GAAG,GAAG,GAAGC,kBAAkB,CAAC;EACtD;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGV,cAAc,GAAGG,cAAc;IACtDH,cAAc,IAAIU,cAAc,GAAGT,kBAAkB;IACrDJ,UAAU,CAACc,IAAI,CAAC;MACd;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXI,iBAAiB,EAAER,QAAQ,GAAGJ,kBAAkB;MAChDS,cAAc,EAAEA,cAAc;MAC9BI,gBAAgB,EAAEd,cAAc;MAChCC,kBAAkB,EAAEA;IACtB,CAAC,CAAC;EACJ;AACF,CAAC;AACD,eAAe,SAASc,eAAeA,CAACC,KAAK,EAAE;EAC7C;EACAT,OAAO,CAACC,GAAG,CAACQ,KAAK,CAAC;EAClBlB,gBAAgB,CAACkB,KAAK,CAAC;;EAEvB;;EAEA,oBACEpB,OAAA;IAAOqB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACvBtB,OAAA;MAAAsB,QAAA,eACEtB,OAAA;QAAAsB,QAAA,gBACEtB,OAAA;UAAAsB,QAAA,EAAI;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACb1B,OAAA;UAAAsB,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtB1B,OAAA;UAAAsB,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB1B,OAAA;UAAAsB,QAAA,EAAI;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvB1B,OAAA;UAAAsB,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAEPzB,UAAU,CAAC0B,GAAG,CAAEC,GAAG,IAAK;MACvB,oBAAO5B,OAAA,CAACF,mBAAmB;QAAgB+B,aAAa,EAAED;MAAI,GAA7BA,GAAG,CAACZ,IAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuB,CAAC;IACnE,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEZ;AAACI,EAAA,GAxBuBX,eAAe;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}