{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\49179\\\\Desktop\\\\First-React-Projekt\\\\SecondProject\\\\01-starting-project\\\\src\\\\Components\\\\InvestmentTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport InvestmentTableItem from \"./InvestmentTableBodyItems\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InvestmentTable(props) {\n  _s();\n  const [yearlyData, setYearlyData] = useState([]);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.yearlySavings; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.expectedInterest / 100;\n    const duration = +userInput.investmentDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      setYearlyData(prevData => {\n        const newYear = i + 1;\n        const newContributions = duration * yearlyContribution;\n        const newInterest = yearlyInterest;\n        const newSavings = currentSavings;\n        const newYearlyContribution = yearlyContribution;\n\n        // Wrap the properties in a single object\n        const updatedData = {\n          [newYear]: {\n            year: newYear,\n            contributions: newContributions,\n            interest: newInterest,\n            savings: newSavings,\n            yearlyContribution: newYearlyContribution\n          },\n          ...prevData\n        };\n        return updatedData;\n      });\n      // yearlyData.push({\n      //   // feel free to change the shape of the data pushed to the array!\n      //   year: i + 1,\n      //   yeartotalInterest: duration * yearlyContribution,\n      //   yearlyInterest: yearlyInterest,\n      //   savingsEndOfYear: currentSavings,\n      //   yearlyContribution: yearlyContribution,\n      // });\n    }\n  };\n\n  changeGivenData(yearlyData);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"result\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Interest (Year)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Interest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Invested Capital\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), givenData.map(obj => {\n      console.log(obj);\n      /*#__PURE__*/_jsxDEV(InvestmentTableItem, {\n        redirctedobjs: obj\n      }, obj.year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(InvestmentTable, \"L2hTGYim4KbKSMBTHo5ostNJKu4=\");\n_c = InvestmentTable;\nvar _c;\n$RefreshReg$(_c, \"InvestmentTable\");","map":{"version":3,"names":["React","useState","InvestmentTableItem","jsxDEV","_jsxDEV","InvestmentTable","props","_s","yearlyData","setYearlyData","calculateHandler","userInput","currentSavings","yearlyContribution","yearlySavings","expectedReturn","expectedInterest","duration","investmentDuration","i","yearlyInterest","prevData","newYear","newContributions","newInterest","newSavings","newYearlyContribution","updatedData","year","contributions","interest","savings","changeGivenData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","givenData","map","obj","console","log","redirctedobjs","_c","$RefreshReg$"],"sources":["C:/Users/49179/Desktop/First-React-Projekt/SecondProject/01-starting-project/src/Components/InvestmentTable.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport InvestmentTableItem from \"./InvestmentTableBodyItems\";\r\n\r\nexport default function InvestmentTable(props) {\r\n  const [yearlyData, setYearlyData] = useState([]);\r\n\r\n  const calculateHandler = (userInput) => {\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n\r\n    let currentSavings = +userInput.currentSavings; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput.yearlySavings; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput.expectedInterest / 100;\r\n    const duration = +userInput.investmentDuration;\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n\r\n      setYearlyData((prevData) => {\r\n        const newYear = i + 1;\r\n        const newContributions = duration * yearlyContribution;\r\n        const newInterest = yearlyInterest;\r\n        const newSavings = currentSavings;\r\n        const newYearlyContribution = yearlyContribution;\r\n\r\n        // Wrap the properties in a single object\r\n        const updatedData = {\r\n          [newYear]: {\r\n            year: newYear,\r\n            contributions: newContributions,\r\n            interest: newInterest,\r\n            savings: newSavings,\r\n            yearlyContribution: newYearlyContribution,\r\n          },\r\n          ...prevData,\r\n        };\r\n\r\n        return updatedData;\r\n      });\r\n      // yearlyData.push({\r\n      //   // feel free to change the shape of the data pushed to the array!\r\n      //   year: i + 1,\r\n      //   yeartotalInterest: duration * yearlyContribution,\r\n      //   yearlyInterest: yearlyInterest,\r\n      //   savingsEndOfYear: currentSavings,\r\n      //   yearlyContribution: yearlyContribution,\r\n      // });\r\n    }\r\n  };\r\n\r\n  changeGivenData(yearlyData);\r\n\r\n  return (\r\n    <table className=\"result\">\r\n      <thead>\r\n        <tr>\r\n          <th>Year</th>\r\n          <th>Total Savings</th>\r\n          <th>Interest (Year)</th>\r\n          <th>Total Interest</th>\r\n          <th>Invested Capital</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      {givenData.map((obj) => {\r\n        console.log(obj);\r\n        <InvestmentTableItem key={obj.year} redirctedobjs={obj} />;\r\n      })}\r\n    </table>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}